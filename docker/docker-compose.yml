version: '3.8'

name: "multitenancy-monolith"

networks:
  caddy:
  redis:
  default:

services:

  caddy:
    container_name: ${COMPOSE_PROJECT_NAME}-caddy
    image: cschulzsuper/mm-caddy:dev
    build: 
      context: caddy
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    depends_on:
      nginx:
        condition: service_started
    networks:
      - caddy

  nginx:    
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    image: cschulzsuper/mm-nginx:dev
    build: 
      context: nginx
      dockerfile: Dockerfile
    depends_on:
      - server
      - portal
      - swagger
      - dev-log
    networks:
      - caddy
      - default

  redis:    
    container_name: ${COMPOSE_PROJECT_NAME}-redis-server
    image: cschulzsuper/mm-redis-server:dev
    build: 
      context: redis-server
      dockerfile: Dockerfile
    environment:
      - REDIS_PASSWORD=default
    ports:
      - 6379:6379
    networks:
      - redis    
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping"]
      interval: 2s
      timeout: 1m30s
      retries: 5
      start_period: 5s

  server:
    container_name: ${COMPOSE_PROJECT_NAME}-server
    image: cschulzsuper/mm-server:dev
    build: 
      context: ../src
      dockerfile: backend/Server/Dockerfile
    networks:
      - default
      - redis
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - service-mappings.env
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_HTTPS_PORTS: 
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT:-Staging}

  portal:
    container_name: ${COMPOSE_PROJECT_NAME}-portal
    image: cschulzsuper/mm-portal:dev
    build: 
      context: ../src
      dockerfile: frontend/Portal/Dockerfile
    networks:
      - default
      - redis
    depends_on:
      redis:
        condition: service_healthy
      server:
        condition: service_started
    env_file:
      - service-mappings.env
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_HTTPS_PORTS: 
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT:-Staging}

  swagger:
    container_name: ${COMPOSE_PROJECT_NAME}-swagger
    image: cschulzsuper/mm-swagger:dev
    build: 
      context: ../src
      dockerfile: frontend/Swagger/Dockerfile
    networks:
      - default
      - redis
    depends_on:
      redis:
        condition: service_healthy
      portal:
        condition: service_started
      server:
        condition: service_started
    env_file:
      - service-mappings.env
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_HTTPS_PORTS: 
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT:-Staging}

  dev-log:
    container_name: ${COMPOSE_PROJECT_NAME}-dev-log
    image: cschulzsuper/mm-dev-log:dev
    build: 
      context: ../src
      dockerfile: frontend/DevLog/Dockerfile
    networks:
      - default
      - redis
    depends_on:
      redis:
        condition: service_healthy
      portal:
        condition: service_started
    env_file:
       - service-mappings.env
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_HTTPS_PORTS: 
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT:-Staging}
      