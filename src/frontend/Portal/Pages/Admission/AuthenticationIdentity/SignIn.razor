@page "/sign-in"

@attribute [AllowAnonymous]

@layout EmptyLayout

@inject SignInService SignInService
@inject NavigationManager NavigationManager

<PageTitle>Sign-In</PageTitle>

<div class="container">
    <div class="card">

        <h1 class="card-title">Sign-In</h1>

        ﻿@if (_errorMessage != null)
        {
            <div role="alert">
                     @_errorMessage
                </div>
        } 

        <EditForm id="account" 
                  method="post" 
                  Model="@Model" 
                  OnValidSubmit="Submit" 
                  FormName="login">

            @switch (Model.Stage)
            {
                case "username":
                    <div class="form-group">

                        <InputText type="hidden" @bind-Value="Model.ClientName" />
                        <InputText type="hidden" @bind-Value="Model.Stage" />

                        <label for="username" class="form-label">Username</label>
                        <InputText id="username"
                                   class="form-control"
                                   aria-required="true"
                                   @bind-Value="Model.Username" />
                    </div>
                    
                    break;
                
                case "password":
                    <div class="form-group">

                        <InputText type="hidden" @bind-Value="Model.ClientName" />
                        <InputText type="hidden" @bind-Value="Model.Stage" />
                        <InputText type="hidden" @bind-Value="Model.Username" />

                        <label for="password" class="form-label">Password</label>
                        <InputText id="password"
                                   class="form-control"
                                   type="password"
                                   aria-required="true"
                                   @bind-Value="Model.Password" />
                    </div>

                    break;
            }
            <div class="form-group">
                <button id="login-submit"
                        class="btn btn-primary"
                        type="submit">Submit</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? _errorMessage;

    [SupplyParameterFromForm]
    public SignInModel Model { get; set; } = new();

    [SupplyParameterFromQuery(Name = "return")]
    public string? Return { get; set; }

    [SupplyParameterFromQuery(Name = "client-name")]
    public string? ClientName { get; set; }

    protected override void OnInitialized()
    {
        Model.Stage ??= "username";
        Model.ClientName ??= ClientName;

        SignInService.InitializeModel(Model);
    }

    public async Task Submit()
    {
        try
        {
            switch (Model.Stage)
            {
                case "username":
                    Model.Username = await SignInService.ResolveAuthenticationIdentityAsync(Model.Username!);
                    Model.Stage = SignInService.NextStage(Model.Stage);
                    break;

                case "password":
                    await SignInService.SignInAsync(Model);
                    RedirectSuccess();
                    break;
            }
        }
        catch(Exception e) when (e is not NavigationException)
        {
            _errorMessage = e.Message;
        }
    }

    private void RedirectSuccess()
    {
        var target = Return ?? "/";
        var targetUri = new Uri(target, UriKind.RelativeOrAbsolute);

        if (!targetUri.IsAbsoluteUri)
        {
            // TODO https://github.com/dotnet/aspnetcore/issues/49670

            var relative = NavigationManager.ToBaseRelativePath(NavigationManager.ToAbsoluteUri(target).AbsoluteUri);
            var absolute = NavigationManager.ToAbsoluteUri(relative).AbsoluteUri;
            NavigationManager.NavigateTo(absolute, true);
        }
        else
        {
            NavigationManager.NavigateTo(targetUri.AbsoluteUri, true);
        }
    }
}