@page "/auth"

@attribute [AllowAnonymous]

@layout EmptyLayout

@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Sign-In</PageTitle>

<div class="container">
    <div class="card">

        <h1 class="card-title">Sign-In</h1>

        ﻿@if (_errorMessage != null)
    {
        <div role="alert">
                         @_errorMessage
            </div>
    } 

        <EditForm id="account" 
                  method="post" 
                  Model="@AccountModel"
                  OnValidSubmit="SubmitAccount" 
                  FormName="account-login">

            @switch (AccountModel.Stage)
    {
        case "username":
            <div class="form-group">

                        <InputText type="hidden" @bind-Value="AccountModel.ClientName" />
                        <InputText type="hidden" @bind-Value="AccountModel.Stage" />

                        <label for="username" class="form-label">Username</label>
                        <InputText id="username"
                                   class="form-control"
                                   aria-required="true"
                        @bind-Value="AccountModel.Username" />
                    </div>
            
            break;
        
        case "password":
            <div class="form-group">

                        <InputText type="hidden" @bind-Value="AccountModel.ClientName" />
                        <InputText type="hidden" @bind-Value="AccountModel.Stage" />
                        <InputText type="hidden" @bind-Value="AccountModel.Username" />

                        <label for="password" class="form-label">Password</label>
                        <InputText id="password"
                                   class="form-control"
                                   type="password"
                                   aria-required="true"
                        @bind-Value="AccountModel.Password" />
                    </div>

            break;
    }
            <div class="form-group">
                <button id="account-login-submit"
                        class="btn btn-primary"
                        type="submit">Submit</button>
            </div>
        </EditForm>
        <EditForm id="guest" 
                  method="post" 
                  Model="@AccountModel"
                  OnValidSubmit="SubmitGuest"
                  FormName="guest-login">
            <InputText type="hidden" @bind-Value="AccountModel.ClientName" />
            <button id="guest-login-submit"
                    class="btn btn-link"
                    type="submit">
                Be My Guest!
            </button>
        </EditForm>
    </div>
</div>

@code {
private string? _errorMessage;

[SupplyParameterFromForm]
public AuthModel AccountModel { get; set; } = new();

[SupplyParameterFromQuery(Name = "return")]
public string? Return { get; set; }

[SupplyParameterFromQuery(Name = "client-name")]
public string? ClientName { get; set; }

protected override void OnInitialized()
{
    AccountModel.Stage ??= "username";
    AccountModel.ClientName ??= ClientName;

    AuthService.InitializeModel(AccountModel);
}

public async Task SubmitAccount()
{
    try
    {
        switch (AccountModel.Stage)
        {
            case "username":
                AccountModel.Username = await AuthService.ResolveAuthenticationIdentityAsync(AccountModel.Username!);
                AccountModel.Stage = AuthService.NextStage(AccountModel.Stage);
                break;

            case "password":
                AccountModel.Method = "secret";
                await AuthService.SignInAsync(AccountModel);
                RedirectSuccess();
                break;
        }
    }
    catch(Exception e) when (e is not NavigationException)
    {
        _errorMessage = e.Message;
    }
}

public async Task SubmitGuest()
{
    try
    {
        AccountModel.Username = "demo";
        AccountModel.Method = "anonymouse";
        await AuthService.SignInAsync(AccountModel);
        RedirectSuccess();
    }
    catch (Exception e) when (e is not NavigationException)
    {
        _errorMessage = e.Message;
    }
}

private void RedirectSuccess()
{
    var target =  $"/redirect?return={Return}";
    var targetUri = new Uri(target, UriKind.RelativeOrAbsolute);

    if (!targetUri.IsAbsoluteUri)
    {
        // TODO https://github.com/dotnet/aspnetcore/issues/49670
        var relative = NavigationManager.ToBaseRelativePath(NavigationManager.ToAbsoluteUri(target).AbsoluteUri);
        var absolute = NavigationManager.ToAbsoluteUri(relative).AbsoluteUri;

        // TODO https://github.com/dotnet/aspnetcore/issues/50384
        HttpContextAccessor.HttpContext!.Response.Headers.Add("blazor-enhanced-nav-redirect-location", absolute);
        HttpContextAccessor.HttpContext!.Response.StatusCode = 200;

        //NavigationManager.NavigateTo(targetUri.absolute, true);
    }
    else
    {
        // TODO https://github.com/dotnet/aspnetcore/issues/50384
        HttpContextAccessor.HttpContext!.Response.Headers.Add("blazor-enhanced-nav-redirect-location", targetUri.AbsoluteUri);
        HttpContextAccessor.HttpContext!.Response.StatusCode = 200;

        //NavigationManager.NavigateTo(targetUri.AbsoluteUri, true);
    }
}
}